---
title: '`glitter` makes SPARQL'
subtitle: '`glitter`, un package R pour explorer et collecter des donn√©es du web s√©mantique'
author: "Lise Vaudor"
institute: "S√©minaire R √† l'Usage des Sciences Sociales"
date: "07/04/2023"
format: 
  revealjs:
    df-print: kable
    scrollable: true
    logo: img/logo_small.png
    css:
     styles.css
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(glitter)
library(tidyverse)
library(kableExtra)
library(stringr)
 show=function(dt){
   dt %>% 
     as.data.frame() %>% 
     kable() %>% 
     kable_styling(bootstrap_options = c("hover","condensed"),
                 full_width = F,
                 position = "float_left",
                 font_size = 10)
   }
```

# Projet RECIT et package glitter

## Projet: origine

<div>

![](img/im_RUSS_1.jpg)

</div>

-   **Analyste de donn√©es** dans un labo de g√©ographie (UMR 5600 Environnement Ville Soci√©t√©)

-   R√¥le **p√©dagogique**: aider les coll√®gues √† **utiliser R** pour leurs analyses/valorisation (blog[üîó](http://perso.ens-lyon.fr/lise.vaudor/))

-   Travail d'**appui √† la recherche** => d√©veloppement d'outils d'analyse, recueil de donn√©es du web (API, web-scraping...)

-   Int√©r√™t pour les **donn√©es du web** (r√©seaux sociaux, projet Wikimedia)

-   D√©couverte du **web des donn√©es** (LOD: Linked Open Data) via les Wikidata

## Projet: RECIT

<div>

![](img/im_RUSS_3.jpg)

</div>

Projet √©mergent ENS **RECIT**:

**R** pour l'**E**xploration et la **C**ollecte **I**nt√©gr√©e de **T**riplets de donn√©es

## Projet: d√©buts et cas d'√©tudes

<div>

![](img/im_RUSS_4.jpg)

</div>

Stage M2 **Camille Scheffler** et exploration des Wikidata pour deux cas d'√©tudes:

-   Les **jumelages** en Europe et dans le monde (Camille Scheffler, Ninon Briot, ATER ENS de Lyon)
-   Le [**lobbyisme** aux USA](http://geoconfluences.ens-lyon.fr/informations-scientifiques/a-la-une/carte-a-la-une/lieux-de-pouvoir-lobbying-etats-unis) (Camille Scheffler, Florence Nussbaum, MCF ENS de Lyon)

## Projet: d√©veloppement

<div>

![](img/im_RUSS_5.jpg)

</div>

En lien (et en parall√®le) aux cas d'√©tudes de Camille, d√©but du **d√©veloppement du package R `glitter`** en 2021.

Premi√®re prestation de **Ma√´lle Salmon** d√©but 2022

## Projet: √† venir

<div>

![](img/im_RUSS_7.jpg)

</div>

2023: second gros chantier sur le package: nouvelle presta de üí™Ma√´lle

## Projet: objectifs

üéØ Promouvoir l'usage (exploration, recueil, analyse) des donn√©es du web s√©mantique pour les chercheurs et √©tudiants usagers de R, en:

-   facilitant l'**√©criture** des requ√™tes SPARQL
-   facilitant l'**envoi** des requ√™tes
-   facilitant le **nettoyage** des r√©sultats pour une analyse/valorisation ult√©rieure dans R

# Web s√©mantique

## Web s√©mantique et Linked Open Data

üí° **Web s√©mantique** Vision du web dans laquelle les donn√©es sont structur√©es et organis√©es pour √™tre traitables par des machines => lien √©troit aux principes FAIR (Findable Accessible Interoperable Reusable)

üß±Ô∏è **Linked Open Data**: Une r√©alisation concr√®te de cette vision, consistant en des donn√©es interconnect√©es et accessible sur le web. *Web des donn√©es*

## Linked Open Data: Donn√©es du web / web des donn√©es

![¬© Camille Scheffler](img/web_des_donnees_cscheffler.png){width="1500px"}

## Linked Open Data: : LOD-cloud

![](img/lod-cloud.jpeg){height="700px"}

## Linked Open Data

![¬© Camille Scheffler](img/LOD_principes_cscheffler.png){width="1500px"} [exemple: URI correspondant √† Victor Hugo sur dbpedia](https://dbpedia.org/page/Victor_Hugo)

## Linked Open Data: difficult√©s d'appropriation

<table><td>

- üëÄ ce qu'on appr√©hende directement: le **web documentaire** 
- üí≠ difficult√©s li√©es √† la structure des donn√©es en **graphes** 
- visualisation souvent **incompl√®te** du graphe (mod√®le de donn√©es) - m√©tadonn√©es int√©gr√©es aux donn√©es => il faut collecter les donn√©es pour comprendre ce qu'il y a dedans 
- transformation en donn√©es **tabulaires** pour analyse  
</td>
<td>
[](img/donnees_en_graphe.png){height="550px"}
</td></table

## Linked Open Data: : difficult√©s de collecte


<table><td>
![](img/dialogue.jpg){width="1500px"} 
</td><td>

<td>
![](img/sparql_to_r\_short.png){width="500px"} 

Importance des **exemples de requ√™tes SPARQL** pour explorer les bases de donn√©es Or, le langage SPARQL est **sp√©cifique** √† 

- cette **√©tape** (dans l'analyse) du recueil de donn√©es 

- ce **type** de donn√©es (les Linked Open Data)
</td>

# Exploration de Wikidata

## Wikidata: exploration c√¥t√© "documentaire"

![](img/Marius_et_Jeannette_WD.png){width="1400px"}

[üîóLien](https://www.wikidata.org/wiki/Q3293881)

## Wikidata et... ChatGPT

Avant: entr√©e par le web "documentaire". Maintenant... bonjour ChatGPT

![](img/dialogue_chatGPT_1.png){width="1200px"}

![](img/dialogue_chatGPT_2.png){width="1200px"}

## Wikidata: exploration c√¥t√© "donn√©es"

Passage par le **Wikidata Query Service (WDQS)**

![](img/WDQS_films_query.png){width="1400px"}

[üîóLien](https://query.wikidata.org/#SELECT%20%3Ffilm%20%3FfilmLabel%20%0AWHERE%20%0A%7B%0A%20%20%3Ffilm%20wdt%3AP31%20wd%3AQ11424.%20%0A%20%20SERVICE%20wikibase%3Alabel%20%7B%20bd%3AserviceParam%20wikibase%3Alanguage%20%22%5BAUTO_LANGUAGE%5D%2Cen%22.%20%7D%0A%7D%0ALIMIT%2010)

<!-- bcp exp√©riment√© SPARQL et triplets de donn√©es par ce biais car existe exemples, documentation, et ressources accessibles par web documentaire -->

## Wikidata: focus sur le SPARQL endpoint (depuis le navigateur)

```         
SELECT ?film ?filmLabel 
WHERE {
  ?film wdt:P31 wd:Q11424.
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". 
  } 
}
LIMIT 10
```

-   ‚úçÔ∏è R√©daction de la requ√™te SPARQL
-   ‚öôÔ∏è Ex√©cution depuis le SPARQL endpoint (navigateur web)
-   üì• Affichage/T√©l√©chargement des r√©sultats

## Wikidata: focus sur le code depuis R

```{r SPARQL_in_R, eval=FALSE}
query='SELECT ?film ?filmLabel 
WHERE {
  ?film wdt:P31 wd:Q11424.
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en".
  }
}'

result=purrr::quietly(WikidataQueryServiceR::query_wikidata)(query)
tib=result$r
```

-   ‚úçÔ∏è R√©daction de la requ√™te SPARQL
-   ‚öôÔ∏è Ex√©cution depuis R
-   üéÅ R√©cup√©ration du tableau de r√©sultats en tant qu'objet R

üéØ Cha√Æne de traitement reproductible

## Wikidata: focus sur le code depuis R, avec glitter

```{r glitter_no_SPARQL}
tib <- spq_init() %>% 
  spq_add("?film wdt:P31 wd:Q11424", .label="?film") %>% 
  spq_head(n=10) %>% 
  spq_perform()
```

<!-- Sans limite, cette requ√™te retournerait 267307 r√©sultats (fonctionne avec glitter, requ√™te directe sur WDQS entra√Ænte Timeout) -->

-   ‚úçÔ∏è ‚öôÔ∏è R√©daction et envoi de commandes R
-   üéÅ Recueil du tableau de r√©sultats en tant qu'objet R

```{r show_result_init,  echo=FALSE}
tib
```

## Wikidata: avant-apr√®s glitter

Avant:

```{r bef_glitter, eval=FALSE}
query='SELECT ?film ?filmLabel WHERE {
  ?film wdt:P31 wd:Q11424.
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en".
  }
}
LIMIT 10'
result=WikidataQueryServiceR::query_wikidata(query)
tib=result$r
```

Apr√®s:

```{r aft_glitter, eval=FALSE}
tib <- spq_init() %>% 
  spq_add("?film wdt:P31 wd:Q11424",.label="?film") %>% 
  spq_head(n=10) %>% 
  spq_perform()
```

# Exemple de requ√™te et valorisation: lieux de fiction

## Ex. lieux de fiction: que veut-on faire?

-   üé• On souhaite r√©cup√©rer dans Wikidata les donn√©es relatives aux films,
-   üìç notamment le lieu de la narration (et les coordonn√©es associ√©es),
-   üåç pour les placer sur une carte.

[üîóLien](https://www.wikidata.org/wiki/Q3293881)

## Ex. lieux de fiction: recueil des donn√©es

```{r req1_lf}
tib <- spq_init() %>%                 # Initialise requ√™te puis
  spq_add("?film wdt:P31 wd:Q11424",  # Ajoute motif "?film est une instance de film" 
          .label="?film") %>%         # ... √©tiquette ?film  puis
  spq_add("?film wdt:P840 ?loc",      # Ajoute motif "?film a pour localisation narrative ?loc 
          .label="?loc") %>%          # ... √©tiquette ?loc puis
  spq_language("en,fr") %>%           # Affiche les √©tiquettes en anglais, ou √† d√©faut en fran√ßais puis
  spq_head(n=10) %>%                  # S√©lectionne les 10 premiers r√©sultats puis
  spq_perform()                       # Envoie la requ√™te
```

```{r req1_lf_show , echo=FALSE}
tib
```

## Ex. lieux de fiction: pas trop de donn√©es?

Combien de films ont la localisation narrative renseign√©e dans Wikidata?

```{r req_glob_lf}
tib <- spq_init() %>%                 # Initialise requ√™te puis
  spq_add("?film wdt:P31 wd:Q11424",  # Ajoute motif "?film est une instance de film"
          .label="?film") %>%         # ... √©tiquette ?film puis
  spq_add("?film wdt:P840 ?loc",      # Ajoute motif "?film a pour lieu de l'action ?loc" 
          .label="?loc") %>%          # ...√©tiquette ?loc puis
  spq_summarise(n_films=n(film)) %>%  # R√©sume en comptant le nombre de films puis
  spq_perform()                       # Envoie la requ√™te
```

```{r req_glob_lf_show , echo=FALSE}
tib
```

## Ex. lieux de fiction : on va restreindre un peu (g√©ographiquement) ...

```{r lf_1}
lf_1=spq_init() %>%                    # Initialise requ√™te puis
  spq_add("?film wdt:P31 wd:Q11424",   # Ajoute motif "?film est une instance de film"
          .label="?film") %>%          # ... √©tiquette ?film
  spq_add("?film wdt:P840 ?loc",       # Ajoute motif "?film a pour localisation narrative ?loc
          .label="?loc") %>%           #  (√† √©tiqueter) puis
  spq_add("?loc wdt:P625 ?coords",     # Ajoute motif "?loc a pour coordonn√©es spatiales ?coords" 
          .within_box=list(southwest=c(3,43),     # ... restreins pour que les coordonn√©es soient comprises
                           northeast=c(7,47))) %>% # ... dans un cadre d√©fini par ces deux points (S-O et N-E) puis
  spq_language("fr") %>%               # Etiquette de pr√©f√©rence en fran√ßais puis    
  spq_perform()                        # Envoie la requ√™te
```

Cette table comprend `r nrow(lf_1)` lignes. Voici les premi√®res:

```{r show_lf_1}
lf_1 %>% head()
```

<!-- La r√©cup de la totalit√© des films localis√©s est possible (prend une 15aine de secondes) mais j'anticipe pour la production de la carte => je veux pas un jeu de donn√©es trop lourd -->

## Ex. lieux de fiction: et on enrichit!

```{r lf_2}
lf_2=spq_init() %>%                    # Initialise requ√™te puis
  spq_add("?film wdt:P31 wd:Q11424",   # Ajoute motif "?film est une instance de film"
          .label="?film") %>%          # ... √©tiquette ?film puis
  spq_add("?film wdt:P840 ?loc",       # Ajoute motif "?film a pour localisation narrative ?loc
          .label="?loc") %>%           # ... √©tiquette ?loc puis
  spq_add("?loc wdt:P625 ?coords",     # Ajoute motif "?loc a pour coordonn√©es spatiales ?coords"
          .within_box=list(southwest=c(3,43),       # ... restreins pour que les coordonn√©es soient comprises
                          northeast=c(7,47))) %>%   # ... dans un cadre d√©fini par ces deux points (S-O et N-E) puis
  spq_add("?film wdt:P18 ?image",      # Ajoute motif "?film a pour image d'illustration ?image" 
          .required=FALSE) %>%                      # ... si dispo, puis 
  spq_add("?film wdt:P921 ?subject",   # Ajoute motif "?film a pour sujet ?subject"
          .label="?subject", .required=FALSE) %>%   # ... si dispo, et √©tiquette ?subject puis
  spq_add("?film wdt:P577 ?date") %>%  # Ajoute motif "?film a √©t√© publi√© √† la date ?date puis
  spq_mutate(year=year(date)) %>%      # Ajoute variable year qui correspond √† l'ann√©e de ?date puis
  spq_language("fr,en") %>%            # Etiquette quand demand√© de pr√©f√©rence en fran√ßais, √† d√©faut en anglais puis
  spq_perform()                        # Envoie la requ√™te
```

## Ex. lieux de fiction: et on enrichit!

Cette table comprend `r nrow(lf_2)` lignes. Voici les premi√®res:

```{r calc_lf_2_show }
lf_2_show <- lf_2 %>% 
   select(filmLabel, locLabel,coords, image,subjectLabel) %>% 
   unique() %>% 
   head()
```

```{r lf_2_show}
lf_2_show
```

## Ex. lieux de fiction: requ√™te SPARQL

```         
SELECT ?film ?loc ?coords ?image ?subject ?date (YEAR(?date) AS ?year)
WHERE{

?film wdt:P31 wd:Q11424.
?film wdt:P840 ?loc.
SERVICE wikibase:box {
  ?loc wdt:P625 ?coords.
  bd:serviceParam wikibase:cornerSouthWest 'Point(3 43)'^^geo:wktLiteral.
  bd:serviceParam wikibase:cornerNorthEast 'Point(7 47)'^^geo:wktLiteral.
}
OPTIONAL {?film wdt:P18 ?image.}
OPTIONAL {?film wdt:P921 ?subject.}
?film wdt:P577 ?date.
SERVICE wikibase:label { bd:serviceParam wikibase:language "fr,en".}
}
```

## Ex. lieux de fiction: nettoyage sous R

```{r lf_c}
lf_c=lf_2 %>%    # Consid√®re lf_2 puis
  clean_wikidata_table() %>% # pr√©fixe les uri
  select(film,ends_with("Label"),coords,image,year) %>%  # S√©lectionne ces variables (dont "....Label") puis
  group_by(film,coords,image,locLabel,filmLabel) %>%     # Groupe par ces variables puis 
  summarise(subjectLabel=paste0(unique(subjectLabel),    # R√©sume par groupe: le sujet (sur une seule ligne)   
                                        collapse=", "),  #  ... en s√©parant les √©l√©ments par ", "
            year=min(year),                              #  ... et l'ann√©e comme minimum des ann√©es de sortie   
            .groups="drop")                              # D√©groupe
```

Cette table comprend `r nrow(lf_c)` lignes. Voici les premi√®res:

```{r show_lf_c}
head(lf_c)
```

## Ex. lieux de fiction: pr√©paration des donn√©es pour carto

üí¨ Pr√©paration d'une fen√™tre "pop-up" (langage **html**) pour **affichage d'infos dans la carte**

```{r}
lf_m =lf_c %>% 
  transform_wikidata_coords("coords") %>% 
  mutate(popup=glue::glue("<h1>{filmLabel}</h1>
                           <li>Lieu: {locLabel}</li>
                           <li>Ann√©e de sortie: {year}</li>")) %>% 
  mutate(popup=case_when(is.na(image)~popup,
                         !is.na(image)~glue::glue("{popup}
                                                  <img src='{image}' height='200'>"))) %>% 
  mutate(popup=case_when(is.na(subjectLabel)~popup,
                         !is.na(subjectLabel)~glue::glue("{popup}
                                                         <li>Th√®mes: {subjectLabel}</li>")))
```

## Ex. lieux de fiction: production d'une carte

üåç Production d'une carte leaflet (carte interactive dans un doc. html).

```{r build_map_film }
library(leaflet) 

# D√©finition d'une √©chelle color√©e 
# (en fonction de date de sortie) 
pal <- colorNumeric(c("red", "green", "blue"), c(1895,1950,1970,1990,2010,2021)) 
# Cr√©ation de la carte 
map=leaflet(lf_m) %>% # d√©f carte 
  addTiles() %>% # ajout fond de carte
  addCircleMarkers(col=~pal(year), ~lng, ~lat,
                   popup = ~popup,
                   clusterOptions = markerClusterOptions()) 
```

```{r, echo=FALSE}
map 
```

# Dimensionnement des requ√™tes

## Dimensionnement des requ√™tes

<table><td>

Temps de r√©ponse du serveur limit√© par un param√®tre de Time out:

- Wikidata Query Service : 60s
- client (par ex. glitter): 300s 

=> 220 000 lignes pour **film** environ: 

- Wikidata Query Service : ‚ùå 
- client (par ex. glitter): ‚úÖÔ∏è 

</td><td>
![](img/taille_requete_1.png) 
</td></table>

## Dimensionnement des requ√™tes

<table><td>

Temps de r√©ponse du serveur limit√© par un param√®tre de Time out:

- Wikidata Query Service : 60s 
- client (par ex. glitter): 300s

=> 2 millions de lignes pour **film**, genre, actor 

- Wikidata Query Service : ‚ùå 
- client (par ex. glitter): ‚ùåÔ∏è 

![](img/taille_requete_2.png)

</td></table>

## Dimensionnement des requ√™tes

<table><td>
Temps de r√©ponse du serveur limit√© par un param√®tre de Time out: 

- Wikidata Query Service : 60s 
- client (par ex. glitter): 300s 

=> 220 000 de lignes pour **film**, genre, actor, **image** :

- Wikidata Query Service : ‚ùå 
- client (par ex. glitter): ‚úÖÔ∏è 

</td><td>
![](img/taille_requete_3.png) 
</td></table>

## Combinaison de requ√™tes

```{r combi_queries}
get_genre_and_actors=function(film_id){
  result=spq_init() %>% 
      spq_set(film= film_id) %>% 
      spq_add("?film wdt:P136 ?genre",.label="?genre") %>%
      spq_add("?film wdt:P161 ?actor",.label="?actor",.required=FALSE) %>% 
      spq_perform() %>% 
      select(-film)
  return(result)
}

tib_genre_actors=lf_c %>%
  head() %>% 
  mutate(data=purrr::map(film,get_genre_and_actors)) %>% 
  unnest(cols=data) %>% 
  clean_wikidata_table()
```

```{r show_tib_genre_actors}
tib_genre_actors %>% select(filmLabel,genreLabel,actorLabel)
```

# Remarques sur les caract√©ristiques de glitter

## Package glitter: vue d'ensemble

![](img/tidyverse_logo.jpeg){width="150px"} Un package qui suit quelques principes du tidyverse...

-   usage du **pipe %\>%**
-   fonctions √† **pr√©fixe** (ici `spq_`)
-   vise √† la **facilit√© d'utilisation** (d√©composition en √©tapes √©l√©mentaires)
-   **√©valuation** tidy (r√©f√©rence directe aux noms de variables)
-   **documentation** via des **vignettes** (par exemple [ici](http://perso.ens-lyon.fr/lise.vaudor/Rpackages/glitter/articles/glitter_for_Wikidata.html))

## Package glitter: fonctions principales


<table><td>
**Fonctions de base:** 

- spq_init() pour initier une requ√™te 
- spq_add() pour rajouter un motif de triplet 
- spq_perform() pour envoyer la requ√™te
[](img/dplyr_logo.jpeg){width="150px"} 

</td><td>

Fonctions notamment inspir√©es de dplyr (pour la **manipulation de donn√©es**) 

- spq_filter() 
- spq_select() 
- spq_arrange() 
- spq_mutate() 
- spq_group_by() 
- spq_summarise() 

</td></table>

## Package glitter: spq_filter()

|                           |                                    |
|---------------------------|------------------------------------|
| ![](img/dplyr_filter.png) | **FILTRER** les r√©sultats renvoy√©s |

Articles avec "wikidata" dans le titre (en anglais):

```{r spq_filter}
spq_init() %>%
  spq_add("?item wdt:P31 wd:Q13442814") %>%                        # ?item est une instance d'article scientifique
  spq_add("?item rdfs:label ?itemTitle") %>%                       # ?item a pour titre ?itemTitle
  spq_filter(str_detect(str_to_lower(itemTitle),"wikidata")) %>%   # <= ce titre contient (en minuscules) "wikidata"
  spq_filter(lang(itemTitle)=="en") %>%                            # <= on filtre pour ne garder que les titres en anglais
  spq_head(n=5) %>%
  spq_perform()
```

## Package glitter: spq_mutate()

|                           |                                     |
|---------------------------|-------------------------------------|
| ![](img/dplyr_mutate.png) | **MODIFIER** les r√©sultats renvoy√©s |

Donn√©es sur films, date de sortie ET ann√©e de sortie

```{r spq_mutate}
spq_init() %>%
 spq_add("?film wdt:P31 wd:Q11424",.label="?film") %>%   # ?film est un instance de film
 spq_add("?film wdt:P577 ?date") %>%                     # ?film est sorti √† la date ?date
 spq_mutate(year=year(date)) %>%                # <= ajoute variable ?year correspondant √† l'ann√©e de la date
 spq_head(5) %>% 
 spq_perform()
```

## Package glitter: spq_select()

|                           |                                          |
|---------------------------|------------------------------------------|
| ![](img/dplyr_select.png) | **SELECTIONNER** les variables renvoy√©es |

Donn√©es sur films, localisation narrative, date de sortie ET ann√©e de sortie

```{r spq_select}
spq_init() %>%
 spq_add("?film wdt:P31 wd:Q11424",.label="?film") %>%   # ?film est une instance de film
 spq_add("?film wdt:P577 ?date") %>%                     # ?film est sorti √† la date ?date
 spq_mutate(year=year(date)) %>%                         # ?year est l'ann√©e correspondant √† ?date
 spq_select(-date) %>%                                  # <= on retire la variable ?date
 spq_head(5) %>% 
 spq_perform()
```

## Package glitter: spq_arrange()

+----------------------------+------------------------------------------+
| ![](img/dplyr_arrange.png) | **ORDONNER** les r√©sultats renvoy√©s.     |
+----------------------------+------------------------------------------+

Personnes n√©es ou habitant √† New York qui font l'objet du plus grand nombre d'articles Wikimedia.

```{r spq_arrange}
spq_init() %>%
  spq_add("?pers wdt:P31 wd:Q5",.label="?pers") %>%       # ?pers est une instance de personne
  spq_add("?pers wdt:P19/wdt:P131* wd:Q60") %>%           # qui est n√©e ou est situ√©e √† New-York
  spq_add("?pers wikibase:sitelinks ?sitelinks") %>%      # ?personne fait l'objet de n liens dans le projet Wikimedia
  spq_arrange(desc(sitelinks)) %>%                        # <= classe par ordre d√©croissant de n
  spq_head(n=5) %>%
  spq_perform()
```

## Package glitter: spq_group_by, spq_summarise()

+------------------------------+---------------------------------------------------+
| ![](img/dplyr_summarise.png) | **GROUPER** et **RESUMER** les r√©sultats renvoy√©s |
+------------------------------+---------------------------------------------------+

Communes d'Auvergne-Rh√¥ne-Alpes qui ont √©t√© supprim√©es lors de la r√©forme territoriale (nombre par d√©partement).

```{r spq_summarise}
tib <- spq_init() %>%
  spq_add("?com wdt:P31 wd:Q21869758") %>%          # ?com est une instance de commune disparue
  spq_add("?com wdt:P131* wd:Q18338206") %>%        # ?com est situ√©e en Auvergne-Rh√¥ne-Alpes
  spq_add("?com wdt:P131* ?dep",.label="?dep") %>%  # ?com est situ√©e dans ?dep
  spq_add("?dep wdt:P31 wd:Q6465") %>%              # ?dep est une instance de d√©partement
  spq_group_by(dep,depLabel)%>%                     # Groupe par ?dep et ?depLabel
  spq_summarise(ncomsup=n(com)) %>%                 # R√©sume: ?ncomsup = nb de ?com
  spq_perform()
```

```{r show_spq_summarise, echo=FALSE}
tib
```

# G√©n√©ralisation √† l'usage d'autres endpoints

## G√©n√©ralisation : dbpedia

![](img/logo_dbpedia.png){width="100px"} Exemple de requ√™te sur le SPARQL endpoint de dbpedia:

```{r dbpedia}
tib <- spq_init() %>%
  spq_add("?person dbo:birthPlace ?place") %>% # ?personne est n√©e √† ?place
  spq_add("?person dbo:profession ?job") %>%   # ?personne a pour profession ?job
  spq_add("?job rdfs:label ?jobLabel") %>%     # ?job a pour √©tiquette ?jobLabel
  spq_filter(lang(jobLabel)=="en") %>%         # Filtre pour ne garder que les √©tiquettes en anglais
  spq_add("?place rdfs:label 'Lyon'@en") %>%   # ?place a pour √©tiquette 'Lyon' (en anglais)
  spq_head(10) %>%
  spq_perform("dbpedia")                       # Envoie sur le SPARQL endpoint de DBPEDIA
```

```{r show_dbpedia,  echo=FALSE}
tib
```

## Remarque: √©l√©ments de simplification par glitter

La requ√™te pr√©c√©dente en SPARQL correspond √† :

```         
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?person ?place ?job ?jobLabel
WHERE{

?person dbo:birthPlace ?place.
?person dbo:profession ?job.
?job rdfs:label ?jobLabel.
?place rdfs:label 'Lyon'@en.
FILTER(lang(?jobLabel)="en")
}

LIMIT 10
```

qui est envoy√©e sur le SPARQL endpoint de dbpedia, dont l'url est:

<https://dbpedia.org/sparql>

## Pr√©fixes usuels

Le package glitter fournit une **liste de pr√©fixes usuels** pour all√©ger l'√©criture de la requ√™te...

```{r show_usual_prefixes }
usual_prefixes
```

</td>

</table>

## G√©n√©ralisation: endpoints "usuels"

... et il fournit une liste d'endpoints usuels:

```{r show_usual_endpoints }
usual_endpoints
```

## G√©n√©ralisation: hal

![](img/logo_hal.png){width="100px"} Exemple de requ√™te sur le SPARQL endpoint de hal:

```{r hal}
tib <- spq_init() %>%
  spq_add("haldoc:inria-00362381 dcterms:hasVersion ?version") %>% # Ce doc a des versions ?version
  spq_add("?version dcterms:title ?title") %>%                     # ?version a pour titre ?titre
  spq_add(". dcterms:creator ?creator") %>%                        # ...... et pour cr√©ateur ?creator
  spq_add(". ore:aggregates ?pdf") %>%                             # ...... et ce lien vers un ?pdf
  spq_add("?creator hal:person ?person") %>%                       # ?creator est une personne ?person
  spq_add("?person foaf:name ?name") %>%                           # ?person a pour nom ?name
  spq_perform("hal")
```

```{r show_hal, echo=FALSE}
tib
```

<!-- # G√©n√©ralisation: tous les endpoints -->

<!-- ‚öñÔ∏è Donn√©es SIPROJURIS: Le parcours biographique de Gaston,Louis, Henry May (1849 - 1940) -->

<!-- ```{r symogih_query} -->

<!-- tib <- spq_init() %>%  -->

<!--   spq_prefix(prefixes=c(sym="http://symogih.org/ontology/",         # Pr√©fixe avec sym: -->

<!--                         syr="http://symogih.org/resource/")) %>%    # Pr√©fixe avec syr: -->

<!--   spq_add("?tyro rdfs:label ?TyRoLabel") %>%  -->

<!--   spq_add("?tyin rdfs:label ?TyInLabel") %>%  -->

<!--   spq_add("?s ?p syr:Actr56241") %>%  -->

<!--   spq_add(". sym:isComponentOf ?info") %>%  -->

<!--   spq_add(". sym:hasRoleType ?tyro") %>%  -->

<!--   spq_add("?info sym:knowledgeUnitStandardLabel ?infoStandardLabel") %>%  -->

<!--   spq_add(". sym:knowledgeUnitStandardDate ?infoStandardDate") %>%  -->

<!--   spq_add(". sym:hasKnowledgeUnitType ?tyin") %>%  -->

<!--   spq_arrange("?infoStandardDate") %>%  -->

<!--   spq_head(n=10) %>%  -->

<!--   spq_perform(endpoint="http://bhp-publi.ish-lyon.cnrs.fr:8888/sparql")    # Envoie sur le sparql endpoint -->

# Perspectives

## Utiliser les LOD pour recueillir et compl√©ter des donn√©es

-   üåª donn√©es **botaniques** => associer une photo et un nom vernaculaire √† un nom d'esp√®ce en latin
-   üèôÔ∏è lien entre **grandes villes et plaines alluviales** => r√©cup√©rer les populations des grandes villes et leurs coordonn√©es, associer √† une rivi√®re
-   üåç **carte du monde** bas√©e sur un shapefile avec des codes pays => r√©cup√©rer les noms de pays, le nom et les coordonn√©es de leur capitales
-   üìú corpus de **communiqu√©s de presse du Minist√®re de l'Ecologie** => r√©cup√©rer le nom du ministre, avec les dates de d√©but et de fin de son mandat.

=> Facilit√© d'usage pour (par exemple) la construction de **jeux de donn√©es p√©dagogiques**

## Un nouveau chantier imminent

![](img/chantier.png){width="100px"} Nouveau gros chantier pr√©vu en mai-juin-juillet 2023

üì£ Retours utilisateurs bienvenus!!

![](img/github_logo.png){width="50px"} Package installable et modifiable [ici](https://github.com/lvaudor/glitter). ![](img/capture_github.png){width="1500px"}

# üôè Merci pour votre attention!

<!-- # ANNEXES -->

<!-- Recrutement de Camille Scheffler (stage M2) et exploration des Wikidata pour deux cas d'√©tudes: -->

<!-- - Les jumelages en Europe et dans le monde (Ninon Briot, ENS de Lyon) -->

<!-- - Le [lobbyisme aux USA](http://geoconfluences.ens-lyon.fr/informations-scientifiques/a-la-une/carte-a-la-une/lieux-de-pouvoir-lobbying-etats-unis) -->

<!-- ![](img/carte_lobbies.png){width=800px} -->

<!-- # Requ√™te supp -->

<!-- ```{r, eval=FALSE} -->

<!-- people=spq_init() %>% -->

<!--   spq_add("?louis16 is wd:Q7732") %>% -->

<!--   spq_add("?louis16 (wdt:P22*/wdt:P25*) ?who",.label="?who") %>% -->

<!--   spq_select("-?louis16") %>% -->

<!--   spq_language("fr") %>% -->

<!--   spq_perform()%>% -->

<!--   mutate(num=1:n()) -->

<!-- ``` -->

<!-- ```{r, eval=FALSE} -->

<!-- list_people=people %>% -->

<!--   clean_wikidata_table() %>% -->

<!--   pull(who) -->

<!-- links=spq_init() %>% -->

<!--   spq_add("?person %in% {list_people}") %>% -->

<!--   spq_add("?person wdt:P22 ?p_father") %>% -->

<!--   spq_add("?person wdt:P25 ?p_mother",.label="?p_mother") %>%  -->

<!--   spq_language("fr") %>% -->

<!--   spq_perform()  -->

<!-- list_people=bind_rows(people, -->

<!--                       links %>% -->

<!--                         select(who=p_mother,whoLabel=p_motherLabel)) -->

<!-- links=links %>% -->

<!--   select(person,p_father,p_mother) %>%  -->

<!--   tidyr::pivot_longer(cols=starts_with("p_"),  -->

<!--                       names_to="which_parent", -->

<!--                       values_to="parent") -->

<!-- linknew=links %>%  -->

<!--   left_join(people %>% -->

<!--               select(who,num_person=num), -->

<!--             by=c("person"="who")) %>%  -->

<!--   left_join(people %>%  -->

<!--               select(who,num_parent=num), -->

<!--             by=c("parent"="who")) -->

<!-- ``` -->

<!-- ```{r, eval=FALSE} -->

<!-- library(tidygraph) -->

<!-- library(ggraph) -->

<!-- tib_g=tidygraph::tbl_graph(nodes=people, -->

<!--                            edges=linksnew)  -->

<!-- tib_g %>% ggraph(layout="sugiyama") -->

<!-- ``` -->
